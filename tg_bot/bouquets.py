import sys
import os
from telebot import types
from pathlib import Path

current_dir = Path(__file__).parent
project_root = current_dir.parent
sys.path.append(str(project_root))

from demo_data.demo_db import get_bouquets, get_flower, get_flowers
from tg_bot.keyboards import create_bouquet_navigation
from tg_bot.states import UserState
from tg_bot.filters import (
    occasion_filter,
    budget_filter,
    color_scheme_filter,
    flower_exclusion_filter,
    finish_flowers_filter,
)


def show_bouquet(bot, message, index, user_data):
    user_id = message.chat.id
    bouquets = user_data[user_id].filtered_bouquets

    if index >= len(bouquets):
        index = 0

    bouquet = bouquets[index]
    user_data[user_id].current_bouquet_index = index

    flowers_info = []
    for flower_id in bouquet.flowers:
        flower = get_flower(flower_id)
        if flower:
            flowers_info.append(flower.title)

    markup = create_bouquet_navigation(index, len(bouquets), bouquet.pk)

    caption = f"""
*{bouquet.title}* üíê

*–°–º—ã—Å–ª:* {bouquet.meaning}

*–°–æ—Å—Ç–∞–≤:* {', '.join(flowers_info)}
*–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞:* {bouquet.color_scheme}
*–¶–µ–Ω–∞:* {bouquet.price} —Ä—É–±.

*–ü–æ–≤–æ–¥:* {bouquet.occasion}
    """

    try:
        if bouquet.image.startswith(("http://", "https://")):
            bot.send_photo(
                message.chat.id,
                bouquet.image,
                caption=caption,
                reply_markup=markup,
                parse_mode="Markdown",
            )
        else:
            with open(bouquet.image, "rb") as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=caption,
                    reply_markup=markup,
                    parse_mode="Markdown",
                )
    except Exception as e:
        bot.send_message(
            message.chat.id, caption, reply_markup=markup, parse_mode="Markdown"
        )


def show_filtered_bouquets(bot, message, user_data):
    user_id = message.chat.id
    if user_id not in user_data:
        from tg_bot.start import send_welcome
        send_welcome(bot, message, user_data)
        return

    all_bouquets = get_bouquets()
    filtered = []

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    occasion = getattr(user_data[user_id], "occasion", "–Ω–µ –≤–∞–∂–Ω–æ")
    budget = getattr(user_data[user_id], "budget", "–Ω–µ –≤–∞–∂–Ω–æ")
    color_scheme = getattr(user_data[user_id], "color_scheme", None)
    excluded_flowers = getattr(user_data[user_id], "excluded_flowers", [])

    for bouquet in all_bouquets:
        matches = True

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–≤–æ–¥—É
        if occasion not in ["–Ω–µ –≤–∞–∂–Ω–æ", "–¥—Ä—É–≥–æ–π –ø–æ–≤–æ–¥"]:
            if bouquet.occasion != occasion:
                matches = False

        # –§–∏–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
        if matches and budget != "–Ω–µ –≤–∞–∂–Ω–æ":
            if budget == "–±–æ–ª—å—à–µ":
                if bouquet.price <= 2000:
                    matches = False
            else:
                budget_ranges = {
                    "~500": (0, 500),
                    "~1000": (501, 1000),
                    "~2000": (1001, 2000),
                }
                if budget in budget_ranges:
                    min_price, max_price = budget_ranges[budget]
                    if not (min_price <= bouquet.price <= max_price):
                        matches = False

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–µ
        if (
            matches
            and color_scheme
            and color_scheme.lower() not in ["–ª—é–±–∞—è"]
        ):
            if bouquet.color_scheme != color_scheme:
                matches = False

        # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–∞–º
        if matches and excluded_flowers:
            if any(flower in excluded_flowers for flower in bouquet.flowers):
                matches = False

        if matches:
            filtered.append(bouquet)

    user_data[user_id].filtered_bouquets = filtered
    user_data[user_id].current_bouquet_index = 0

    if not filtered:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üíê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é"))
        markup.add(types.KeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"))

        bot.send_message(
            message.chat.id,
            "üòî *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±—É–∫–µ—Ç–æ–≤.*",
            reply_markup=markup,
            parse_mode="Markdown",
        )
        return

    markup = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        "üîç *–ü–æ–¥–±–∏—Ä–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±—É–∫–µ—Ç—ã...*",
        reply_markup=markup,
        parse_mode="Markdown",
    )
    show_bouquet(bot, message, 0, user_data)


def setup_bouquet_handlers(bot, user_data):

    @bot.message_handler(
        func=lambda message: message.text == "üíê –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é"
    )
    def handle_show_all_collection(message):
        user_id = message.chat.id
        if user_id not in user_data:
            user_data[user_id] = UserState()

        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        user_data[user_id].occasion = "–Ω–µ –≤–∞–∂–Ω–æ"
        user_data[user_id].budget = "–Ω–µ –≤–∞–∂–Ω–æ"
        user_data[user_id].color_scheme = None
        user_data[user_id].color_scheme_set = False
        user_data[user_id].excluded_flowers = []

        all_bouquets = get_bouquets()
        user_data[user_id].filtered_bouquets = all_bouquets
        user_data[user_id].current_bouquet_index = 0

        if not all_bouquets:
            bot.send_message(
                message.chat.id,
                "üòî *–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤.*",
                parse_mode="Markdown",
            )
            return

        markup = types.ReplyKeyboardRemove()
        bot.send_message(
            message.chat.id,
            "üå∏ *–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –±—É–∫–µ—Ç–æ–≤...*",
            reply_markup=markup,
            parse_mode="Markdown",
        )
        show_bouquet(bot, message, 0, user_data)

    @bot.message_handler(func=lambda message: occasion_filter(message))
    def handle_occasion(message):
        user_id = message.chat.id
        if user_id not in user_data:
            user_data[user_id] = UserState()

        user_data[user_id].occasion = message.text
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        user_data[user_id].budget = None
        user_data[user_id].color_scheme = None
        user_data[user_id].color_scheme_set = False
        user_data[user_id].excluded_flowers = []

        from tg_bot.keyboards import create_color_scheme_keyboard

        markup = create_color_scheme_keyboard()

        bot.send_message(
            message.chat.id,
            "üé® *–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
    @bot.message_handler(func=lambda message: color_scheme_filter(message))
    def handle_color_scheme(message):
        user_id = message.chat.id
        if user_id not in user_data:
            from tg_bot.start import send_welcome

            send_welcome(bot, message, user_data)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        if (
            hasattr(user_data[user_id], "color_scheme_set")
            and user_data[user_id].color_scheme_set
        ):
            return

        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã: {message.text}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∏ —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        user_data[user_id].color_scheme = message.text
        user_data[user_id].color_scheme_set = True

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–Ω–µ –≤–∞–∂–Ω–æ", —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
        if message.text.lower() in ["–ª—é–±–∞—è"]:
            user_data[user_id].color_scheme = None

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ excluded_flowers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (
            not hasattr(user_data[user_id], "excluded_flowers")
            or user_data[user_id].excluded_flowers is None
        ):
            user_data[user_id].excluded_flowers = []

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—é —Ü–≤–µ—Ç–æ–≤
        from tg_bot.keyboards import create_flowers_exclusion_keyboard

        markup = create_flowers_exclusion_keyboard(user_data[user_id].excluded_flowers)
        bot.send_message(
            message.chat.id,
            "‚ùå *–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –±—É–∫–µ—Ç–µ:*\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–≤–µ—Ç–æ–∫, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ –ø–æ–∏—Å–∫–∞. "
            "–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ *‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä*, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    @bot.message_handler(func=lambda message: flower_exclusion_filter(message))
    def handle_flower_exclusion(message):
        user_id = message.chat.id
        if user_id not in user_data:
            from tg_bot.start import send_welcome

            send_welcome(bot, message, user_data)
            return

        flower_name = message.text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        flowers = get_flowers()

        flower_found = False
        for flower in flowers:
            if flower.title == flower_name:
                flower_found = True
                if message.text.startswith("‚ùå"):
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–æ–∫
                    if flower.pk not in user_data[user_id].excluded_flowers:
                        user_data[user_id].excluded_flowers.append(flower.pk)
                        status_msg = f"‚ùå {flower_name} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –ø–æ–∏—Å–∫–∞"
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–≤–µ—Ç–æ–∫
                    if flower.pk in user_data[user_id].excluded_flowers:
                        user_data[user_id].excluded_flowers.remove(flower.pk)
                        status_msg = f"‚úÖ {flower_name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –ø–æ–∏—Å–∫"
                break

        if not flower_found:
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from tg_bot.keyboards import create_flowers_exclusion_keyboard

        markup = create_flowers_exclusion_keyboard(user_data[user_id].excluded_flowers)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.send_message(
            message.chat.id,
            status_msg,
            reply_markup=markup,
        )

    @bot.message_handler(func=lambda message: finish_flowers_filter(message))
    def handle_finish_flowers(message):
        user_id = message.chat.id
        if user_id not in user_data:
            from tg_bot.start import send_welcome
            send_welcome(bot, message, user_data)
            return

        from tg_bot.keyboards import create_budget_keyboard

        markup = create_budget_keyboard()

        bot.send_message(
            message.chat.id,
            "üíµ *–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–ë–†–ê–ë–û–¢–ß–ò–ö –ë–Æ–î–ñ–ï–¢–ê - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
    @bot.message_handler(func=lambda message: budget_filter(message))
    def handle_budget(message):
        user_id = message.chat.id
        if user_id not in user_data:
            from tg_bot.start import send_welcome
            send_welcome(bot, message, user_data)
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—é–¥–∂–µ—Ç
        user_data[user_id].budget = message.text
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±—é–¥–∂–µ—Ç: {user_data[user_id].budget}")

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–Ω–µ –≤–∞–∂–Ω–æ", —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É–∫–µ—Ç—ã
        if message.text.lower() in ["–Ω–µ –≤–∞–∂–Ω–æ"]:
            user_data[user_id].budget = "–Ω–µ –≤–∞–∂–Ω–æ"
            show_filtered_bouquets(bot, message, user_data)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–µ—Ç—ã
        show_filtered_bouquets(bot, message, user_data)

    @bot.message_handler(func=lambda message: message.text == "üíê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–∫–µ—Ç—ã")
    def show_bouquets_again(message):
        user_id = message.chat.id
        if user_id in user_data and user_data[user_id].filtered_bouquets:
            show_bouquet(
                bot, message, user_data[user_id].current_bouquet_index, user_data
            )
        else:
            from tg_bot.start import send_welcome

            send_welcome(bot, message, user_data)

    @bot.message_handler(
        func=lambda message: message.text == "üíê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é"
    )
    def show_all_collection(message):
        user_id = message.chat.id
        if user_id not in user_data:
            user_data[user_id] = UserState()

        user_data[user_id].occasion = "–Ω–µ –≤–∞–∂–Ω–æ"
        user_data[user_id].budget = "–Ω–µ –≤–∞–∂–Ω–æ"
        user_data[user_id].color_scheme = None
        user_data[user_id].excluded_flowers = []

        all_bouquets = get_bouquets()
        user_data[user_id].filtered_bouquets = all_bouquets
        user_data[user_id].current_bouquet_index = 0

        if not all_bouquets:
            bot.send_message(
                message.chat.id,
                "üòî *–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤.*",
                parse_mode="Markdown",
            )
            return

        markup = types.ReplyKeyboardRemove()
        bot.send_message(
            message.chat.id,
            "üå∏ *–ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –±—É–∫–µ—Ç–æ–≤...*",
            reply_markup=markup,
            parse_mode="Markdown",
        )
        show_bouquet(bot, message, 0, user_data)