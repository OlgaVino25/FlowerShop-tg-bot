from telebot import types
from demo_data.demo_db import get_occasions, get_color_schemes, get_flowers
import demo_data.demo_db as db

def create_occasion_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    occasions = get_occasions()
    for occasion in occasions:
        markup.add(types.KeyboardButton(occasion.title))
    return markup

def create_budget_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    budgets = ["~500", "~1000", "~2000", "–±–æ–ª—å—à–µ", "–Ω–µ –≤–∞–∂–Ω–æ"]
    for budget in budgets:
        markup.add(types.KeyboardButton(budget))
    return markup

def create_color_scheme_keyboard():
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    color_schemes = get_color_schemes()
    for scheme in color_schemes:
        markup.add(types.KeyboardButton(scheme.title))
    markup.add(types.KeyboardButton("–Ω–µ –≤–∞–∂–Ω–æ"))
    return markup

def create_flowers_exclusion_keyboard(excluded_flowers):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    flowers = get_flowers()
    flower_buttons = []

    for flower in flowers:
        if flower.pk in excluded_flowers:
            flower_buttons.append(types.KeyboardButton(f"‚úÖ {flower.title}"))
        else:
            flower_buttons.append(types.KeyboardButton(f"‚ùå {flower.title}"))

    for i in range(0, len(flower_buttons), 2):
        if i + 1 < len(flower_buttons):
            markup.row(flower_buttons[i], flower_buttons[i + 1])
        else:
            markup.row(flower_buttons[i])

    markup.row(types.KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"))
    return markup

def create_phone_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True))
    markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"))
    return markup

def create_date_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞"))
    markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return markup

def create_time_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    times = ["10:00-12:00", "12:00-14:00", "14:00-16:00", 
             "16:00-18:00", "18:00-20:00", "20:00-22:00"]
    for i in range(0, len(times), 2):
        if i + 1 < len(times):
            markup.row(types.KeyboardButton(times[i]), types.KeyboardButton(times[i + 1]))
        else:
            markup.row(types.KeyboardButton(times[i]))
    markup.row(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return markup

def create_comment_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"))
    markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return markup

def create_bouquet_navigation(bouquet_index, bouquets_count, bouquet_pk):
    markup = types.InlineKeyboardMarkup()
    
    if bouquets_count > 1:
        prev_index = bouquet_index - 1 if bouquet_index > 0 else bouquets_count - 1
        next_index = bouquet_index + 1 if bouquet_index < bouquets_count - 1 else 0

        markup.row(
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bouquet_{prev_index}"),
            types.InlineKeyboardButton("–î–∞–ª—å—à–µ ‚û°Ô∏è", callback_data=f"bouquet_{next_index}"),
        )

    markup.row(
        types.InlineKeyboardButton("üíê –ó–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç", callback_data=f"order_{bouquet_pk}")
    )

    markup.row(
        types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="consultation"),
        types.InlineKeyboardButton("üå∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="all_collection"),
    )
    return markup