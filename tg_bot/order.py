import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telebot import types
from datetime import datetime, timedelta
from demo_data.demo_db import add_order, get_bouquet, get_flower
from tg_bot.keyboards import (
    create_phone_keyboard,
    create_date_keyboard,
    create_time_keyboard,
    create_comment_keyboard,
)
from tg_bot.validators import (
    validate_name,
    validate_phone,
    validate_address,
    validate_delivery_date_and_time,
)


def setup_order_handlers(bot, user_data):

    @bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
    def handle_order_callback(call):
        user_id = call.message.chat.id
        if user_id not in user_data:
            from tg_bot.start import send_welcome
            send_welcome(bot, call.message, user_data)
            return

        bouquet_pk = int(call.data.split("_")[1])
        user_data[user_id].order_bouquet_pk = bouquet_pk
        user_data[user_id].order_state = 'name'

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"))

        bot.send_message(
            call.message.chat.id,
            "üë§ *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*",
            reply_markup=markup,
            parse_mode="Markdown",
        )
        bot.answer_callback_query(call.id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏
    @bot.message_handler(func=lambda message: user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], 'order_state', None) == 'name')
    def handle_order_name(message):
        user_id = message.chat.id

        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É":
            from tg_bot.navigation import back_to_selection
            back_to_selection(message)
            user_data[user_id].order_state = None
            return

        is_valid, error_msg = validate_name(message.text)
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        user_data[user_id].order_name = message.text
        user_data[user_id].order_state = 'phone'

        markup = create_phone_keyboard()
        bot.send_message(
            message.chat.id,
            "üìû *–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç
    @bot.message_handler(content_types=['contact'], 
                      func=lambda message: user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], 'order_state', None) == 'phone')
    def handle_order_contact(message):
        user_id = message.chat.id
        phone = message.contact.phone_number

        is_valid, error_msg = validate_phone(phone)
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        user_data[user_id].phone = phone
        user_data[user_id].order_state = 'address'

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))

        bot.send_message(
            message.chat.id,
            "üè† *–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n\n_–ü—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª–∏—Ü–∞ –ú–∏—Ä–∞, –¥–æ–º 10_",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    @bot.message_handler(func=lambda message: message.text == "üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é" and
                      user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], 'order_state', None) == 'phone')
    def handle_manual_phone_option(message):
        user_id = message.chat.id

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"))

        bot.send_message(
            message.chat.id,
            "üìû *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*\n\n_–ü—Ä–∏–º–µ—Ä: 9123456789 –∏–ª–∏ +79123456789_",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
    @bot.message_handler(func=lambda message: user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], 'order_state', None) == 'phone' and
                      message.text not in ["üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"])
    def handle_manual_phone_input(message):
        user_id = message.chat.id

        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É":
            from tg_bot.navigation import back_to_selection
            back_to_selection(message)
            user_data[user_id].order_state = None
            return

        is_valid, error_msg = validate_phone(message.text)
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        user_data[user_id].phone = message.text
        user_data[user_id].order_state = 'address'

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))

        bot.send_message(
            message.chat.id,
            "üè† *–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n\n_–ü—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª–∏—Ü–∞ –ú–∏—Ä–∞, –¥–æ–º 10_",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥—Ä–µ—Å–∞
    @bot.message_handler(func=lambda message: user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], 'order_state', None) == 'address')
    def handle_address(message):
        user_id = message.chat.id
        
        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            user_data[user_id].order_state = 'phone'
            markup = create_phone_keyboard()
            bot.send_message(
                message.chat.id,
                "üìû *–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*",
                reply_markup=markup,
                parse_mode="Markdown",
            )
            return

        is_valid, error_msg = validate_address(message.text)
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        user_data[user_id].order_address = message.text
        user_data[user_id].order_state = 'date'

        markup = create_date_keyboard()
        bot.send_message(
            message.chat.id,
            "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã
    @bot.message_handler(func=lambda message: user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], 'order_state', None) == 'date')
    def handle_delivery_date(message):
        user_id = message.chat.id

        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            user_data[user_id].order_state = 'address'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
            bot.send_message(
                message.chat.id,
                "üè† *–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*",
                reply_markup=markup,
                parse_mode="Markdown",
            )
            return

        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
        if now.hour >= 18:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ 18:00, –¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if message.text == "–°–µ–≥–æ–¥–Ω—è":
                bot.send_message(
                    message.chat.id, 
                    "‚ùå *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –ø–æ—Å–ª–µ 18:00, –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.*", 
                    parse_mode="Markdown"
                )
                return
            elif message.text == "–ó–∞–≤—Ç—Ä–∞":
                delivery_date = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
            else:
                bot.send_message(
                    message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ó–∞–≤—Ç—Ä–∞'"
                )
                return
        else:
            # –ï—Å–ª–∏ –¥–æ 18:00, –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
            if message.text == "–°–µ–≥–æ–¥–Ω—è":
                delivery_date = datetime.now().strftime("%Y-%m-%d")
            elif message.text == "–ó–∞–≤—Ç—Ä–∞":
                delivery_date = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
            else:
                bot.send_message(
                    message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–ó–∞–≤—Ç—Ä–∞'"
                )
                return

        user_data[user_id].delivery_date = delivery_date
        user_data[user_id].order_state = 'time'

        markup = create_time_keyboard()
        bot.send_message(
            message.chat.id,
            "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
    @bot.message_handler(func=lambda message: user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], 'order_state', None) == 'time')
    def handle_delivery_time(message):
        user_id = message.chat.id

        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            user_data[user_id].order_state = 'date'
            markup = create_date_keyboard()
            bot.send_message(
                message.chat.id,
                "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:*",
                reply_markup=markup,
                parse_mode="Markdown",
            )
            return

        user_data[user_id].delivery_time = message.text

        is_valid, error_msg = validate_delivery_date_and_time(
            user_data[user_id].delivery_date, message.text
        )
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        user_data[user_id].order_state = 'comment'

        markup = create_comment_keyboard()
        bot.send_message(
            message.chat.id,
            "üí¨ *–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    @bot.message_handler(func=lambda message: user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], 'order_state', None) == 'comment')
    def handle_comment(message):
        user_id = message.chat.id

        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            user_data[user_id].order_state = 'time'
            markup = create_time_keyboard()
            bot.send_message(
                message.chat.id,
                "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:*",
                reply_markup=markup,
                parse_mode="Markdown",
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –≤—ã–±–æ—Ä–∞
        if message.text == "‚úÖ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è":
            user_data[user_id].comment = ""
        else:
            user_data[user_id].comment = message.text

        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{user_data[user_id].comment}'")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        try:
            order_data = add_order(
                customer=user_id,
                bouquet=user_data[user_id].order_bouquet_pk,
                address=user_data[user_id].order_address,
                delivery_date=user_data[user_id].delivery_date,
                delivery_time=user_data[user_id].delivery_time,
                comment=user_data[user_id].comment,
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ
            bouquet = get_bouquet(user_data[user_id].order_bouquet_pk)
            flowers_info = []
            for flower_id in bouquet.flowers:
                flower = get_flower(flower_id)
                if flower:
                    flowers_info.append(flower.title)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–≤–æ–¥ –¥–ª—è –∑–∞–∫–∞–∑–∞
            occasion = user_data[user_id].occasion
            if hasattr(user_data[user_id], 'custom_occasion') and user_data[user_id].custom_occasion:
                occasion = user_data[user_id].custom_occasion

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            order_message = f"""‚úÖ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*

–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_data['pk']}
–ü–æ–≤–æ–¥: {occasion}
–ë—É–∫–µ—Ç: {bouquet.title}
–¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.
–ò–º—è: {user_data[user_id].order_name}
–¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id].phone}
–ê–¥—Ä–µ—Å: {user_data[user_id].order_address}
–î–∞—Ç–∞: {user_data[user_id].delivery_date}
–í—Ä–µ–º—è: {user_data[user_id].delivery_time}"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if user_data[user_id].comment:
                order_message += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data[user_id].comment}"

            order_message += "\n\n–ö—É—Ä—å–µ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–∫–∞–∑–µ!"

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
            courier_chat_id = 666666666
            try:
                courier_message = f"""üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*

*–ó–∞–∫–∞–∑ ‚Ññ:* {order_data['pk']}
*–ò–º—è:* {user_data[user_id].order_name}
*–¢–µ–ª–µ—Ñ–æ–Ω:* {user_data[user_id].phone}
*–ê–¥—Ä–µ—Å:* {user_data[user_id].order_address}
*–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {user_data[user_id].delivery_date}
*–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* {user_data[user_id].delivery_time}
*–ü–æ–≤–æ–¥:* {occasion}"""

                if user_data[user_id].comment:
                    courier_message += f"\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {user_data[user_id].comment}"

                courier_message += f"""

*–ë—É–∫–µ—Ç:* {bouquet.title}
*–¶–µ–Ω–∞:* {bouquet.price} —Ä—É–±.
*–°–æ—Å—Ç–∞–≤:* {', '.join(flowers_info)}"""

                bot.send_message(courier_chat_id, courier_message, parse_mode="Markdown")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É: {e}")

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("üíê –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"))

            bot.send_message(
                message.chat.id,
                order_message,
                reply_markup=markup,
                parse_mode="Markdown",
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            bot.send_message(
                message.chat.id,
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*",
                parse_mode="Markdown",
            )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        user_data[user_id].order_state = None
        for attr in ['order_bouquet_pk', 'order_name', 'phone', 'order_address', 
                    'delivery_date', 'delivery_time', 'comment']:
            if hasattr(user_data[user_id], attr):
                delattr(user_data[user_id], attr)

    @bot.message_handler(func=lambda message: message.text == "üíê –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
    def new_order(message):
        from tg_bot.start import send_welcome
        send_welcome(bot, message, user_data)