import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telebot import types
from datetime import datetime, timedelta
from demo_data.demo_db import add_order, get_bouquet, get_flower
from tg_bot.keyboards import (
    create_phone_keyboard,
    create_date_keyboard,
    create_time_keyboard,
    create_comment_keyboard,
)
from tg_bot.filters import (
    contact_filter,
    address_filter,
    date_filter,
    time_filter,
    comment_filter,
)
from tg_bot.validators import (
    validate_name,
    validate_phone,
    validate_address,
    validate_delivery_date_and_time,
)
import demo_data.demo_db as db


def setup_order_handlers(bot, user_data):

    @bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
    def handle_order_callback(call):
        user_id = call.message.chat.id
        if user_id not in user_data:
            from tg_bot.start import send_welcome

            send_welcome(bot, call.message, user_data)
            return

        bouquet_pk = int(call.data.split("_")[1])
        user_data[user_id].order_bouquet_pk = bouquet_pk

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"))

        bot.send_message(
            call.message.chat.id,
            "üë§ *–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?*",
            reply_markup=markup,
            parse_mode="Markdown",
        )
        user_data[user_id].waiting_order_name = True
        bot.answer_callback_query(call.id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–º–µ–Ω–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    @bot.message_handler(
        func=lambda message: user_data.get(message.chat.id)
        and getattr(user_data[message.chat.id], "waiting_order_name", False)
    )
    def handle_order_name(message):
        user_id = message.chat.id

        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É":
            from tg_bot.navigation import back_to_selection

            back_to_selection(message)
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        is_valid, error_msg = validate_name(message.text)
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        user_data[user_id].order_name = message.text
        user_data[user_id].waiting_order_name = False
        user_data[user_id].waiting_phone = True

        from tg_bot.keyboards import create_phone_keyboard

        markup = create_phone_keyboard()

        bot.send_message(
            message.chat.id,
            "üìû *–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    @bot.message_handler(
        func=lambda message: contact_filter(message)
        and user_data.get(message.chat.id)
        and not getattr(user_data[message.chat.id], "consultation_mode", False)
        and hasattr(user_data[message.chat.id], "order_name")
    )
    def handle_order_contact(message):
        user_id = message.chat.id
        phone = message.contact.phone_number

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        is_valid, error_msg = validate_phone(phone)
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        user_data[user_id].phone = phone
        user_data[user_id].waiting_phone = False  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))

        bot.send_message(
            message.chat.id,
            "üè† *–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n\n_–ü—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª–∏—Ü–∞ –ú–∏—Ä–∞, –¥–æ–º 10_",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    @bot.message_handler(func=lambda message: message.text == "üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
    def handle_manual_phone_input(message):
        user_id = message.chat.id
        if user_id not in user_data:
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"))

        bot.send_message(
            message.chat.id,
            "üìû *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*\n\n_–ü—Ä–∏–º–µ—Ä: 9123456789 –∏–ª–∏ +79123456789_",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    @bot.message_handler(func=lambda message: address_filter(message, user_data))
    def handle_address(message):
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞: {message.text}")
        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            markup = create_phone_keyboard()
            bot.send_message(
                message.chat.id,
                "üìû *–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*",
                reply_markup=markup,
                parse_mode="Markdown",
            )
            # –£–¥–∞–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –µ–≥–æ –≤–≤–æ–¥—É
            if hasattr(user_data[message.chat.id], "phone"):
                delattr(user_data[message.chat.id], "phone")
            return

        is_valid, error_msg = validate_address(message.text)
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        user_id = message.chat.id
        user_data[user_id].order_address = message.text

        markup = create_date_keyboard()
        bot.send_message(
            message.chat.id,
            "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    @bot.message_handler(func=lambda message: date_filter(message, user_data))
    def handle_delivery_date(message):
        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
            bot.send_message(
                message.chat.id,
                "üè† *–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*",
                reply_markup=markup,
                parse_mode="Markdown",
            )
            return

        user_id = message.chat.id

        if message.text == "–°–µ–≥–æ–¥–Ω—è":
            delivery_date = datetime.now().strftime("%Y-%m-%d")
        elif message.text == "–ó–∞–≤—Ç—Ä–∞":
            delivery_date = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        else:
            bot.send_message(
                message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–ó–∞–≤—Ç—Ä–∞'"
            )
            return

        now = datetime.now()
        if now.hour >= 18 and message.text == "–°–µ–≥–æ–¥–Ω—è":
            bot.send_message(
                message.chat.id, "‚ùå *–ú–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 18:00*", parse_mode="Markdown"
            )
            return

        user_data[user_id].delivery_date = delivery_date
        markup = create_time_keyboard()
        bot.send_message(
            message.chat.id,
            "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    @bot.message_handler(func=lambda message: time_filter(message, user_data))
    def handle_delivery_time(message):
        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            markup = create_date_keyboard()
            bot.send_message(
                message.chat.id,
                "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:*",
                reply_markup=markup,
                parse_mode="Markdown",
            )
            return

        user_id = message.chat.id
        user_data[user_id].delivery_time = message.text

        is_valid, error_msg = validate_delivery_date_and_time(
            user_data[user_id].delivery_date, message.text.split("-")[0] + ":00"
        )
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return

        markup = create_comment_keyboard()
        bot.send_message(
            message.chat.id,
            "üí¨ *–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:*",
            reply_markup=markup,
            parse_mode="Markdown",
        )

    @bot.message_handler(func=lambda message: comment_filter(message, user_data))
    def handle_comment(message):
        if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            markup = create_time_keyboard()
            bot.send_message(
                message.chat.id,
                "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:*",
                reply_markup=markup,
                parse_mode="Markdown",
            )
            return

        user_id = message.chat.id
        user_data[user_id].comment = (
            "" if message.text == "‚úÖ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è" else message.text
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É–∫–µ—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        bouquet = get_bouquet(user_data[user_id].order_bouquet_pk)
        flowers_info = []
        for flower_id in bouquet.flowers:
            flower = get_flower(flower_id)
            if flower:
                flowers_info.append(flower.title)

        order_data = add_order(
            customer=user_id,
            bouquet=user_data[user_id].order_bouquet_pk,
            address=user_data[user_id].order_address,
            delivery_date=user_data[user_id].delivery_date,
            delivery_time=user_data[user_id].delivery_time,
            comment=user_data[user_id].comment,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID)
        courier_chat_id = 666666666  # ID –∫—É—Ä—å–µ—Ä–∞ –∏–∑ demo_data
        try:
            order_summary = f"""
            üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*
            
            *–ó–∞–∫–∞–∑ ‚Ññ:* {order_data['pk']}
            *–ò–º—è:* {user_data[user_id].order_name}
            *–¢–µ–ª–µ—Ñ–æ–Ω:* {user_data[user_id].phone}
            *–ê–¥—Ä–µ—Å:* {user_data[user_id].order_address}
            *–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* {user_data[user_id].delivery_date}
            *–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* {user_data[user_id].delivery_time}
            *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {user_data[user_id].comment}
            
            *–ë—É–∫–µ—Ç:* {bouquet.title}
            *–¶–µ–Ω–∞:* {bouquet.price} —Ä—É–±.
            *–°–æ—Å—Ç–∞–≤:* {', '.join(flowers_info)}
            *–ü–æ–≤–æ–¥:* {bouquet.occasion}
            """
            bot.send_message(courier_chat_id, order_summary, parse_mode="Markdown")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É: {e}")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üíê –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"))

        bot.send_message(
            message.chat.id,
            f"‚úÖ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_data['pk']}\n"
            f"–ë—É–∫–µ—Ç: {bouquet.title}\n"
            f"–¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n"
            f"–ê–¥—Ä–µ—Å: {user_data[user_id].order_address}\n"
            f"–î–∞—Ç–∞: {user_data[user_id].delivery_date}\n"
            f"–í—Ä–µ–º—è: {user_data[user_id].delivery_time}\n\n"
            f"–ö—É—Ä—å–µ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–∫–∞–∑–µ!",
            reply_markup=markup,
            parse_mode="Markdown",
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_attrs = [
            "order_bouquet_pk",
            "order_address",
            "delivery_date",
            "delivery_time",
            "comment",
            "order_name",
            "phone",
        ]
        for attr in order_attrs:
            if hasattr(user_data[user_id], attr):
                delattr(user_data[user_id], attr)

    @bot.message_handler(func=lambda message: message.text == "üíê –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
    def new_order(message):
        from tg_bot.start import send_welcome

        send_welcome(bot, message, user_data)


def handle_manual_phone_input_message(bot, message, user_data):
    user_id = message.chat.id

    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É":
        from tg_bot.navigation import back_to_selection

        back_to_selection(message)
        return

    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    is_valid, error_msg = validate_phone(message.text)
    if not is_valid:
        bot.send_message(message.chat.id, f"‚ùå {error_msg}")
        return

    user_data[user_id].phone = message.text
    user_data[user_id].waiting_phone = False

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))

    bot.send_message(
        message.chat.id,
        "üè† *–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:*\n\n_–ü—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, —É–ª–∏—Ü–∞ –ú–∏—Ä–∞, –¥–æ–º 10_",
        reply_markup=markup,
        parse_mode="Markdown",
    )
