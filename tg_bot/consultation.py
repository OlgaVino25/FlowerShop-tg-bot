from telebot import types
from demo_data.demo_db import add_consultation, find_user
from tg_bot.keyboards import create_phone_keyboard
from tg_bot.filters import contact_filter
from tg_bot.validators import validate_phone
import demo_data.demo_db as db


def handle_consultation_contact(bot, message, user_data):
    user_id = message.chat.id
    phone = message.contact.phone_number

    is_valid, error_msg = validate_phone(phone)
    if not is_valid:
        bot.send_message(message.chat.id, f"‚ùå {error_msg}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    consultation_data = add_consultation(
        customer=user_id,
        phone=phone,
        occasion=getattr(user_data[user_id], "occasion", "–Ω–µ —É–∫–∞–∑–∞–Ω"),
        budget=0,
        preferred_colors=[user_data[user_id].color_scheme] if user_data[user_id].color_scheme else [],
        excluded_flowers=user_data[user_id].excluded_flowers,
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç—É (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Ñ–ª–æ—Ä–∏—Å—Ç–∞)
    florist_chat_id = 000000000  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    try:
        bot.send_message(
            florist_chat_id,
            f"üìû *–ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!*\n\n"
            f"–ö–ª–∏–µ–Ω—Ç: {message.chat.first_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ü–æ–≤–æ–¥: {getattr(user_data[user_id], 'occasion', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {consultation_data['pk']}",
            parse_mode="Markdown",
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç—É: {e}")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üíê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–∫–µ—Ç—ã"))

    bot.send_message(
        message.chat.id,
        "‚úÖ *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞–Ω–∞!*\n\n"
        "–§–ª–æ—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!",
        reply_markup=markup,
        parse_mode="Markdown",
    )

    user_data[user_id].consultation_mode = False


def setup_consultation_handlers(bot, user_data):
    
    @bot.callback_query_handler(func=lambda call: call.data == "consultation")
    def handle_consultation_callback(call):
        user_id = call.message.chat.id
        if user_id not in user_data:
            from tg_bot.start import send_welcome
            send_welcome(bot, call.message, user_data)
            return

        markup = create_phone_keyboard()
        bot.send_message(
            call.message.chat.id,
            "üë©‚Äçüé® *–ó–∞–∫–∞–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞*\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç!",
            reply_markup=markup,
            parse_mode="Markdown",
        )
        user_data[call.message.chat.id].consultation_mode = True
        bot.answer_callback_query(call.id)

    @bot.message_handler(func=lambda message: message.text == "üìû –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
    def handle_consultation_text(message):
        user_id = message.chat.id
        if user_id not in user_data:
            from tg_bot.start import send_welcome
            send_welcome(bot, message, user_data)
            return

        markup = create_phone_keyboard()
        bot.send_message(
            message.chat.id,
            "üë©‚Äçüé® *–ó–∞–∫–∞–∑ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∞*\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç!",
            reply_markup=markup,
            parse_mode="Markdown",
        )
        user_data[user_id].consultation_mode = True

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    @bot.message_handler(content_types=['contact'], 
                      func=lambda message: user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], "consultation_mode", False))
    def consultation_contact_handler(message):
        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—ã–∑–≤–∞–Ω")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        handle_consultation_contact(bot, message, user_data)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    @bot.message_handler(func=lambda message: 
                      user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], "consultation_mode", False) and
                      message.text not in ["üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", "üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é", "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"])
    def consultation_manual_phone_handler(message):
        user_id = message.chat.id
        phone = message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        is_valid, error_msg = validate_phone(phone)
        if not is_valid:
            bot.send_message(message.chat.id, f"‚ùå {error_msg}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_data = add_consultation(
            customer=user_id,
            phone=phone,
            occasion=getattr(user_data[user_id], "occasion", "–Ω–µ —É–∫–∞–∑–∞–Ω"),
            budget=0,
            preferred_colors=[user_data[user_id].color_scheme] if user_data[user_id].color_scheme else [],
            excluded_flowers=user_data[user_id].excluded_flowers,
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç—É
        florist_chat_id = 000000000  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —Ñ–ª–æ—Ä–∏—Å—Ç–∞
        try:
            bot.send_message(
                florist_chat_id,
                f"üìû *–ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!*\n\n"
                f"–ö–ª–∏–µ–Ω—Ç: {message.chat.first_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"–ü–æ–≤–æ–¥: {getattr(user_data[user_id], 'occasion', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {consultation_data['pk']}",
                parse_mode="Markdown",
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç—É: {e}")

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("üíê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–∫–µ—Ç—ã"))

        bot.send_message(
            message.chat.id,
            "‚úÖ *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞–Ω–∞!*\n\n"
            "–§–ª–æ—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!",
            reply_markup=markup,
            parse_mode="Markdown",
        )

        user_data[user_id].consultation_mode = False

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é" –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    @bot.message_handler(func=lambda message: 
                      user_data.get(message.chat.id) and 
                      getattr(user_data[message.chat.id], "consultation_mode", False) and
                      message.text == "üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
    def handle_manual_phone_option_consultation(message):
        user_id = message.chat.id

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É"))

        bot.send_message(
            message.chat.id,
            "üìû *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*\n\n_–ü—Ä–∏–º–µ—Ä: 9123456789 –∏–ª–∏ +79123456789_",
            reply_markup=markup,
            parse_mode="Markdown",
        )