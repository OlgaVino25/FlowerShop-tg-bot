"""Telegram bot."""
# import os
from environs import Env
from telegram import ReplyKeyboardMarkup  # , KeyboardButton
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler
)


# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    CHOOSING_EVENT,
    TYPING_CUSTOM_EVENT,
    CHOOSING_BUDGET,
    ORDER_OPTIONS,
    CONSULTATION,
    COLLECTION_VIEW
) = range(6)


# –°–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤
BOUQUETS = [
    {
        'photo': 'bouquet.jpg',
        'description': (
            '–ë—É–∫–µ—Ç ‚Ññ1: –ù–µ–∂–Ω–æ—Å—Ç—å... –°–æ—Å—Ç–∞–≤: —Ä–æ–∑—ã, –ø–∏–æ–Ω—ã. –°—Ç–æ–∏–º–æ—Å—Ç—å: 1500 —Ä—É–±.'
        )
    },
    {
        'photo': 'bouquet2.jpeg',
        'description': (
            '–ë—É–∫–µ—Ç ‚Ññ2: –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å... –°–æ—Å—Ç–∞–≤: –ª–∏–ª–∏–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å: 2000 —Ä—É–±.'
        )
    }
]
current_bouquet_index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –±—É–∫–µ—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏


def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    context.user_data.clear()

    event_keyboard = [
        ['–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéâ', '–°–≤–∞–¥—å–±–∞ üíí'],
        ['–í —à–∫–æ–ª—É üéì', '–ë–µ–∑ –ø–æ–≤–æ–¥–∞ üòä'],
        ['–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥']
    ]
    reply_markup = ReplyKeyboardMarkup(event_keyboard, resize_keyboard=True)

    update.message.reply_text(
        (
            '–ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è?\
            –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π.'
        ),
        reply_markup=reply_markup
    )

    return CHOOSING_EVENT


def event_received(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–≤–æ–¥–∞."""
    user_choice = update.message.text
    user_data = context.user_data

    if user_choice == '–î—Ä—É–≥–æ–π –ø–æ–≤–æ–¥':
        update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —É –≤–∞—Å –ø–æ–≤–æ–¥:')
        return TYPING_CUSTOM_EVENT

    user_data['event'] = user_choice

    budget_keyboard = [
        ['~500 —Ä—É–±', '~1000 —Ä—É–±'],
        ['~2000 —Ä—É–±', '–ë–æ–ª—å—à–µ'],
        ['–ù–µ –≤–∞–∂–Ω–æ']
    ]
    reply_markup = ReplyKeyboardMarkup(budget_keyboard, resize_keyboard=True)

    update.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ! –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
        reply_markup=reply_markup
    )
    return CHOOSING_BUDGET


def custom_event_received(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –ø–æ–≤–æ–¥–∞."""
    custom_event = update.message.text
    context.user_data['event'] = f'"{custom_event}"'

    budget_keyboard = [
        ['~500 —Ä—É–±', '~1000 —Ä—É–±'],
        ['~2000 —Ä—É–±', '–ë–æ–ª—å—à–µ'],
        ['–ù–µ –≤–∞–∂–Ω–æ']
    ]
    reply_markup = ReplyKeyboardMarkup(budget_keyboard, resize_keyboard=True)

    update.message.reply_text(
        '–ó–∞–ø–æ–º–Ω–∏–ª–∏! –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
        reply_markup=reply_markup
    )
    return CHOOSING_BUDGET


def budget_received(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞ –∏ –ø–æ–∫–∞–∑ –ø–µ—Ä–≤–æ–≥–æ –±—É–∫–µ—Ç–∞."""
    user_budget = update.message.text
    user_event = context.user_data.get('event', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—é–¥–∂–µ—Ç
    context.user_data['budget'] = user_budget

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±—É–∫–µ—Ç
    show_bouquet(update, context)

    return ORDER_OPTIONS


def show_bouquet(update, context):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –±—É–∫–µ—Ç–∞."""
    user_event = context.user_data.get('event', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—É–∫–µ—Ç
    bouquet = BOUQUETS[current_bouquet_index]

    bouquet_caption = f"""
    üéÄ –ò–¥–µ–∞–ª—å–Ω—ã–π –±—É–∫–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è {user_event}
    {bouquet['description']}
    """

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
    order_keyboard = [
        ['–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç'],
        ['–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é']
        ]
    reply_markup = ReplyKeyboardMarkup(order_keyboard, resize_keyboard=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±—É–∫–µ—Ç–∞
    with open(bouquet['photo'], 'rb') as photo_file:
        update.message.reply_photo(
            photo=photo_file,
            caption=bouquet_caption,
            reply_markup=reply_markup)

    # --------–∫–æ–¥ –Ω–∏–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –¥–æ–ª–∂–Ω–æ----------
    # update.message.reply_text(
    #     '–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
    #      reply_markup=reply_markup
    #     )
    # –¢–µ–∫—Å—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    # options_text = (
    #     '**–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?\
    #     –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏\
    #     –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞**'
    #     )
    # options_keyboard = [
    #     ['–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é']
    # ]
    # options_markup = ReplyKeyboardMarkup(
    #     options_keyboard,
    #     resize_keyboard=True
    #     )
    # update.message.reply_text(
    #     options_text,
    #     reply_markup=options_markup,
    #     parse_mode='Markdown'
    #     )


def order_bouquet(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç'."""
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
    context.user_data['order_step'] = 'name'
    update.message.reply_text(
        '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = [['–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']]
    reply_markup = ReplyKeyboardMarkup(cancel_keyboard, resize_keyboard=True)
    update.message.reply_text(
        '–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"',
        reply_markup=reply_markup
    )

    return ORDER_OPTIONS


def process_order_data(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞."""
    user_data = context.user_data
    current_step = user_data.get('order_step')
    user_text = update.message.text

    if user_text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
        return cancel_order(update, context)

    if current_step == 'name':
        user_data['customer_name'] = user_text
        user_data['order_step'] = 'address'
        update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:')

    elif current_step == 'address':
        user_data['address'] = user_text
        user_data['order_step'] = 'date'
        update.message.reply_text(
            '–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30.09.2025)'
        )

    elif current_step == 'date':
        user_data['delivery_date'] = user_text
        user_data['order_step'] = 'time'
        update.message.reply_text(
            '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00-16:00)'
        )

    elif current_step == 'time':
        user_data['delivery_time'] = user_text
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É
        send_order_to_courier(update, context)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
        show_post_order_options(update, context)
        user_data['order_step'] = None
        return ORDER_OPTIONS

    return ORDER_OPTIONS


def send_order_to_courier(update, context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä—É."""
    user_data = context.user_data

    order_details = f"""
    üö® –ù–û–í–´–ô –ó–ê–ö–ê–ó –ë–£–ö–ï–¢–ê üö®

    –°–æ–±—ã—Ç–∏–µ: {user_data.get('event', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
    –ë—é–¥–∂–µ—Ç: {user_data.get('budget', '–Ω–µ —É–∫–∞–∑–∞–Ω')}

    –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:
    –ò–º—è: {user_data.get('customer_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
    –ê–¥—Ä–µ—Å: {user_data.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
    –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data.get('delivery_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
    –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data.get('delivery_time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}

    –ë—É–∫–µ—Ç: {BOUQUETS[current_bouquet_index]['description']}
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
    context.bot.send_message(chat_id=courier_chat_id, text=order_details)

    print(f"–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä—É: {order_details}")  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    update.message.reply_text(
        '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
    )


def show_post_order_options(update, context):
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞."""
    options_text = (
        '**–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ? –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑\
        –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞**'
        )
    options_keyboard = [
        ['–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é']
    ]
    options_markup = ReplyKeyboardMarkup(
        options_keyboard,
        resize_keyboard=True
    )

    update.message.reply_text(
        options_text,
        reply_markup=options_markup,
        parse_mode='Markdown'
    )


def order_consultation(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'."""
    update.message.reply_text(
        '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç.'
    )
    context.user_data['waiting_for_phone'] = True
    return CONSULTATION


def process_consultation_phone(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    phone_number = update.message.text
    context.user_data['consultation_phone'] = phone_number

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–ª–æ—Ä–∏—Å—Ç—É
    context.bot.send_message(
        chat_id=florist_chat_id,
        text=f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: {phone_number}'
    )

    print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: {phone_number}")  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    update.message.reply_text(
        '‚úÖ –°–ø–∞—Å–∏–±–æ! –ù–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç.'
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –æ–ø—Ü–∏—è–º
    show_post_order_options(update, context)
    context.user_data['waiting_for_phone'] = False
    return ORDER_OPTIONS


def show_collection(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é'."""
    global current_bouquet_index
    current_bouquet_index = (current_bouquet_index + 1) % len(BOUQUETS)
    show_bouquet(update, context)
    return ORDER_OPTIONS


def cancel_order(update, context):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞."""
    context.user_data['order_step'] = None
    update.message.reply_text('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.')
    show_post_order_options(update, context)
    return ORDER_OPTIONS


if __name__ == '__main__':
    env = Env()
    env.read_env()
    token = env.str('TG_TOKEN')
    courier_chat_id = env.str('CHAT_ID')
    florist_chat_id = env.str('CHAT_ID')
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher

    updater.start_polling(allowed_updates=['message', 'callback_query'])
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_EVENT: [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    event_received
                )
            ],
            TYPING_CUSTOM_EVENT: [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    custom_event_received
                )
            ],
            CHOOSING_BUDGET: [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    budget_received
                )
            ],
            ORDER_OPTIONS: [
                MessageHandler(Filters.regex(
                    '^(–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç)$'),
                    order_bouquet
                ),
                MessageHandler(Filters.regex(
                    '^(–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é)$'),
                    order_consultation
                ),
                MessageHandler(Filters.regex(
                    '^(–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é$)'),
                    show_collection
                ),
                MessageHandler(
                    Filters.text & ~Filters.command,
                    process_order_data
                )
            ],
            CONSULTATION: [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    process_consultation_phone
                )
            ]
        },
        fallbacks=[]
    )

    dp.add_handler(conv_handler)

    updater.start_polling()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
    updater.idle()
